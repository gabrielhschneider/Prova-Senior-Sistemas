unit uComponente;

interface

uses
  uFrame, uLabel, uBotao, uMemo;
type

  TComponente = class;

  TComponenteArray = array of TComponente;

  TComponente = class
  private
    FX: Integer;
    FY: Integer;
    FAltura: Integer;
    FLargura: Integer;
    FComponentes: TComponenteArray;
    FValor: String;
  public
    function GetX: Integer;
    function GetY: Integer;
    function GetAltura: Integer;
    function GetLargura: Integer;
    function GetValor: String;

    {Criada}
    function GetComponentes: TComponenteArray;

    {Criada}
    procedure SetComponentes(const Value: TComponenteArray);

    procedure Redimensionar(aAltura, aLargura: Integer);

    procedure SetX(const Value: Integer);
    procedure SetY(const Value: Integer);
    procedure SetAltura(const Value: Integer);
    procedure SetLargura(const Value: Integer);
    procedure SetValor(const Value: String);

    procedure AdicionaComponente(aComponente: TComponente); virtual;
    procedure RemoveComponente(aComponente: TComponente); virtual;

    constructor Create(aX, aY, aAltura, aLargura : Integer; aValor : String);

    property X: Integer read GetX write SetX;
    property Y: Integer read GetY write SetY;
    property Altura: Integer read GetAltura write SetAltura;
    property Largura: Integer read GetLargura write SetLargura;
    property Valor: String read GetValor write SetValor;

    property Componentes: TComponenteArray read GetComponentes write SetComponentes;
    end;

implementation

{Constructor}
constructor TComponente.Create(aX, aY, aAltura, aLargura : Integer; aValor : String);
begin
  FX := aX;
  FY := aY;
  FAltura := aAltura;
  FLargura:= aLargura;
  FValor := aValor;
end;

{Adicionar Componente}
procedure TComponente.AdicionaComponente(aComponente: TComponente);
begin
  SetLength(FComponentes, Length(FComponentes) + 1);
  FComponentes[Length(Self.Componentes) - 1] := aComponente;
end;

{Redimensionar}
procedure TComponente.Redimensionar(aAltura, aLargura: Integer);
var
  i : integer;
begin
  FAltura := aAltura;
  self.FLargura:= aLargura;

  for i := 0 to Length(self.FComponentes) do
  begin
    if self.FComponentes[i] is TLabel then
    begin
      self.FComponentes[i].SetX(self.FLargura div 2);
      self.FComponentes[i].SetY(self.FAltura div 2);
    end

    else if Self.FComponentes[i] is TBotao then
    begin
      self.FComponentes[i].SetX(self.FLargura div 2);
      self.FComponentes[i].SetY(self.FAltura div 2);
      self.FComponentes[i].SetLargura(self.FLargura div 2);
    end

    else if Self.FComponentes[i] is TMemo then
    begin
      self.FComponentes[i].SetX(self.FLargura div 2);
      self.FComponentes[i].SetY(self.FAltura div 2);
      self.FComponentes[i].SetLargura(self.FLargura div 2);
      self.FComponentes[i].SetAltura(self.FAltura div 2);
    end

    else
    begin
      self.FComponentes[i].SetX(self.FLargura div 2);
      self.FComponentes[i].SetY(self.FAltura div 2);
      self.FComponentes[i].SetLargura(self.FLargura div 2);
      self.FComponentes[i].SetAltura(self.FAltura div 2);
    end;
  end;

end;

{Remove}
procedure TComponente.RemoveComponente(aComponente: TComponente);
begin
end;

{Get}
function TComponente.GetComponentes: TComponenteArray;
begin
  Result := self.FComponentes;
end;

function TComponente.GetAltura: Integer;
begin
  Result := FAltura;
end;

function TComponente.GetLargura: Integer;
begin
  Result := FLargura;
end;

function TComponente.GetValor: String;
begin
  Result := FValor;
end;

function TComponente.GetX: Integer;
begin
  Result := FX;
end;

function TComponente.GetY: Integer;
begin
  Result := FY;
end;

{Set}
procedure TComponente.SetComponentes(const Value: TComponenteArray);
begin
  FComponentes := Value;
end;

procedure TComponente.SetAltura(const Value: Integer);
begin
  FAltura := Value;
end;

procedure TComponente.SetLargura(const Value: Integer);
begin
  FLargura := Value;
end;

procedure TComponente.SetValor(const Value: String);
begin
  FValor := Value;
end;

procedure TComponente.SetX(const Value: Integer);
begin
  FX := Value;
end;

procedure TComponente.SetY(const Value: Integer);
begin
  FY := Value;
end;

end.

